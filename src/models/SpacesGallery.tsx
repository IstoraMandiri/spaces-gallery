/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { loadModel } from "../services/loader";
import { ModelProps } from "../types/model";
import { BufferGeometry } from "three";
import { useConvexPolyhedron } from "use-cannon";

type GLTFResult = GLTF & {
  nodes: {
    GALLERYWALLS: THREE.Mesh;
    GALLERYFLOOR: THREE.Mesh;
    ROOFLIP: THREE.Mesh;
    Gallery_cut1: THREE.Mesh;
  };
  materials: {
    ["ROOF.LIP"]: THREE.MeshStandardMaterial;
    Gallery_cut: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;
  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/models/SpacesGallery15/SpacesGallery15.glb",
    loadModel(setLoading)
  );

  materials["Gallery_cut"].metalness = 0.3;
  materials["Gallery_cut"].refractionRatio = 0.5;

  materials["ROOF.LIP"].metalness = 0.3;
  materials["ROOF.LIP"].refractionRatio = 0.5;

  const floorGeo = useMemo(() => {
    return new THREE.Geometry().fromBufferGeometry(
      nodes.GALLERYFLOOR.geometry as BufferGeometry
    );
  }, [nodes]);
  const [floorHitbox] = useConvexPolyhedron(() => ({
    type: "Static",
    args: floorGeo.clone().scale(100, 100, 100).translate(0, 0.5, 0),
  }));

  const wallsGeo = useMemo(() => {
    return new THREE.Geometry().fromBufferGeometry(
      nodes.GALLERYWALLS.geometry as BufferGeometry
    );
  }, [nodes]);
  const [wallsHitbox] = useConvexPolyhedron(() => ({
    type: "Static",
    args: wallsGeo
      .clone()
      .translate(0.08147, 0.019881, 0.204819)
      .rotateX(0.009378)
      .rotateY(1.545416)
      .rotateZ(-2.543593)
      .scale(100, 100, 100)
      .translate(0, 0.5, 0),
  }));

  return (
    <group ref={group} {...props} dispose={null}>
      <group
        position={[0, 0.5, 0]}
        scale={[100, 100, 100]}
        rotation={[0, Math.PI / 3, 0]}
      >
        <mesh
          material={materials["ROOF.LIP"]}
          geometry={nodes.ROOFLIP.geometry}
          position={[0, 0.07, 0]}
        />
        <mesh
          material={materials.Gallery_cut}
          geometry={nodes.Gallery_cut1.geometry}
          position={[0.000995, 0.040815, 0.008863]}
          receiveShadow
        />
      </group>
    </group>
  );
}
