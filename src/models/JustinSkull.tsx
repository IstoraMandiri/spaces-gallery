/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useFrame, useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import { loadModel } from "../services/loader";
import { ModelProps } from "../core/types/model";
import { Color, MeshPhongMaterial } from "three";

type GLTFResult = GLTF & {
  nodes: {
    JUSTINSKULL: THREE.Mesh;
  };
  materials: {
    SKULL: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;
  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const mesh = useRef<THREE.Group>();
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/content/opening/justin/JustinSkull2/JustinSkull2.glb",
    loadModel(setLoading)
  );

  materials.SKULL.color = new Color(0x4a4a4a);
  materials.SKULL.metalness = 1;
  // materials.SKULL.reflectivity = 1;
  // materials.SKULL.shininess = 50;
  // materials.SKULL.specular = 0xffffff;

  useFrame(({ clock }) => {
    if (mesh.current) {
      mesh.current.rotation.y = clock.getElapsedTime() / 10;
    }
  });

  return (
    <group ref={group} {...props} dispose={null} name="justin-skull">
      <group scale={[100, 100, 100]} ref={mesh}>
        <mesh
          material={materials.SKULL}
          geometry={nodes.JUSTINSKULL.geometry}
        />
      </group>
    </group>
  );
}
