/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { loadModel } from "../services/loader";
import { ModelProps } from "../types/model";
import { BufferGeometry } from "three";
import { useConvexPolyhedron } from "use-cannon";

type GLTFResult = GLTF & {
  nodes: {
    GALLERYMESH: THREE.Mesh;
  };
  materials: {
    INSIDE: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;
  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/models/SpacesGallery4/SpacesGallery4.gltf",
    loadModel(setLoading)
  );
  materials["INSIDE"].metalness = 0;
  materials["INSIDE"].side = THREE.DoubleSide;

  // const galleryGeo = useMemo(() => {
  //   return new THREE.Geometry().fromBufferGeometry(
  //     nodes.GALLERYMESH.geometry as BufferGeometry
  //   );
  // }, [nodes]);
  // const [wallsHitbox] = useConvexPolyhedron(() => ({
  //   type: "Static",
  //   args: galleryGeo
  //     .clone()
  //     .scale(100, 100, 100)
  //     .translate(0, 0.5, 0),
  // }));

  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[0, 0.5, 0]} scale={[100, 100, 100]}>
        <mesh
          material={materials.INSIDE}
          geometry={nodes.GALLERYMESH.geometry}
        />
      </group>
    </group>
  );
}
