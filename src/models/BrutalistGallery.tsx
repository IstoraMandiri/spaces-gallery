/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import { loadModel } from "../services/loader";
import { ModelProps } from "../types/model";
import { useTrimeshCollision } from "../services/collision";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    handrail: THREE.Mesh;
    ["Stairs-A"]: THREE.Mesh;
    ["Stairs-B"]: THREE.Mesh;
    Collision: THREE.Mesh;
    ["roof-2nd-level"]: THREE.Mesh;
    ["Stairs-2nd-floor"]: THREE.Mesh;
    ["Floor-Level-2"]: THREE.Mesh;
    ["side-wall"]: THREE.Mesh;
    glass: THREE.Mesh;
    ground: THREE.Mesh;
    frame: THREE.Mesh;
    horizontal: THREE.Mesh;
    columns: THREE.Mesh;
    ["walls-ground-level"]: THREE.Mesh;
    ["Plato-D"]: THREE.Mesh;
    ["Plato-C"]: THREE.Mesh;
    ["Plato-B"]: THREE.Mesh;
    ["Plato-A"]: THREE.Mesh;
  };
  materials: {
    wood: THREE.MeshStandardMaterial;
    Stairs: THREE.MeshStandardMaterial;
    Blue: THREE.MeshStandardMaterial;
    concrete: THREE.MeshStandardMaterial;
    sidewalls: THREE.MeshStandardMaterial;
    glass: THREE.MeshStandardMaterial;
    ground: THREE.MeshStandardMaterial;
    frame: THREE.MeshStandardMaterial;
    horizontal: THREE.MeshStandardMaterial;
    columns: THREE.MeshStandardMaterial;
    ["walls-ground-level"]: THREE.MeshStandardMaterial;
    ["Plato-D"]: THREE.MeshStandardMaterial;
    ["Plato-C"]: THREE.MeshStandardMaterial;
    ["Plato-B"]: THREE.MeshStandardMaterial;
    ["Plato-A"]: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;

  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/models/BrutalistGallery2/BrutalistGallery2.glb",
    loadModel(setLoading)
  );

  useTrimeshCollision(
    (nodes.Collision.geometry as BufferGeometry)
      .clone()
      .translate(-0.000011, 0, 870.000061)
      .scale(0.01, 0.01, 0.01)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[0.01, 0.01, 0.01]}>
        <group position={[0.000001, 0, -750]}>
          <mesh
            material={materials.wood}
            geometry={nodes.handrail.geometry}
            position={[810, 25.980762, -82.508141]}
          />
        </group>
        <group position={[-0.000011, -180, 870.000061]}>
          <mesh
            material={materials.Stairs}
            geometry={nodes["Stairs-A"].geometry}
          />
        </group>
        <group position={[-0.000011, -60, 990.000061]}>
          <mesh
            material={materials.Stairs}
            geometry={nodes["Stairs-B"].geometry}
          />
        </group>
        <mesh
          material={materials.Blue}
          geometry={nodes.Collision.geometry}
          position={[-0.000011, 0, 870.000061]}
        />
        <mesh
          material={materials.concrete}
          geometry={nodes["roof-2nd-level"].geometry}
          position={[-0.000011, 945, -959.999939]}
        />
        <mesh
          material={materials.concrete}
          geometry={nodes["Stairs-2nd-floor"].geometry}
          position={[0.000001, 0, -60]}
        />
        <mesh
          material={materials.concrete}
          geometry={nodes["Floor-Level-2"].geometry}
          position={[-0.000011, 15, -964.769958]}
        />
        <mesh
          material={materials.sidewalls}
          geometry={nodes["side-wall"].geometry}
          position={[0.000001, 1013.606201, 15.000053]}
        />
        <mesh
          material={materials.glass}
          geometry={nodes.glass.geometry}
          position={[0.000001, 900, 689.062561]}
        />
        <mesh
          material={materials.ground}
          geometry={nodes.ground.geometry}
          position={[0.000001, 0, -194.999985]}
        />
        <mesh
          material={materials.frame}
          geometry={nodes.frame.geometry}
          position={[0.000001, 900, 689.062561]}
        />
        <mesh
          material={materials.horizontal}
          geometry={nodes.horizontal.geometry}
          position={[0.000001, 742.5, 524.531311]}
        />
        <mesh
          material={materials.columns}
          geometry={nodes.columns.geometry}
          position={[0.000001, -15, 360.000061]}
        />
        <mesh
          material={materials["walls-ground-level"]}
          geometry={nodes["walls-ground-level"].geometry}
          position={[-1620, 585, 1320]}
        />
        <mesh
          material={materials["Plato-D"]}
          geometry={nodes["Plato-D"].geometry}
          position={[89.999992, 0, 1035]}
        />
        <mesh
          material={materials["Plato-C"]}
          geometry={nodes["Plato-C"].geometry}
          position={[89.999992, 0, 1035]}
        />
        <mesh
          material={materials["Plato-B"]}
          geometry={nodes["Plato-B"].geometry}
          position={[89.999992, 0, 1035]}
        />
        <mesh
          material={materials["Plato-A"]}
          geometry={nodes["Plato-A"].geometry}
          position={[89.999992, 0, 1035]}
        />
      </group>
    </group>
  );
}
