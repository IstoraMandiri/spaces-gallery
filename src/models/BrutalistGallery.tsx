/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import { loadModel } from "../services/loader";
import { ModelProps } from "../types/model";
import { useTrimeshCollision } from "../services/collision";
import { BufferGeometry } from "three";

type GLTFResult = GLTF & {
  nodes: {
    Collision: THREE.Mesh;
    fix: THREE.Mesh;
    ["roof-B"]: THREE.Mesh;
    ["roof-A"]: THREE.Mesh;
    ["black-curtain"]: THREE.Mesh;
    walls: THREE.Mesh;
    columns: THREE.Mesh;
    glass: THREE.Mesh;
    horizontal: THREE.Mesh;
    ["door-rail-walls"]: THREE.Mesh;
    floor: THREE.Mesh;
    ground: THREE.Mesh;
    frame: THREE.Mesh;
    ["walls-ground-level"]: THREE.Mesh;
    ["Plato-A"]: THREE.Mesh;
    ["Plato-B"]: THREE.Mesh;
    ["Plato-C"]: THREE.Mesh;
    ["Plato-D"]: THREE.Mesh;
    ["Stairs-A"]: THREE.Mesh;
    ["Stairs-B"]: THREE.Mesh;
    ["Stairs-C"]: THREE.Mesh;
  };
  materials: {
    ["roof-b"]: THREE.MeshStandardMaterial;
    ["roof-a"]: THREE.MeshStandardMaterial;
    ["black-curtain"]: THREE.MeshStandardMaterial;
    ["walls-far"]: THREE.MeshStandardMaterial;
    columns: THREE.MeshStandardMaterial;
    glass: THREE.MeshStandardMaterial;
    horizontal: THREE.MeshStandardMaterial;
    ["door-rail-walls"]: THREE.MeshStandardMaterial;
    floor: THREE.MeshStandardMaterial;
    ground: THREE.MeshStandardMaterial;
    frame: THREE.MeshStandardMaterial;
    ["walls-ground-level"]: THREE.MeshStandardMaterial;
    ["Plato-A"]: THREE.MeshStandardMaterial;
    ["Plato-B"]: THREE.MeshStandardMaterial;
    ["Plato-C"]: THREE.MeshStandardMaterial;
    ["Plato-D"]: THREE.MeshStandardMaterial;
    ["Stairs-A"]: THREE.MeshStandardMaterial;
    ["Stairs-B"]: THREE.MeshStandardMaterial;
    ["Stairs-C"]: THREE.MeshStandardMaterial;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;

  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/models/BrutalistGallery4/BrutalistGallery4.glb",
    loadModel(setLoading)
  );

  materials.glass.refractionRatio = 0.8;

  useTrimeshCollision(
    (nodes.Collision.geometry as BufferGeometry).clone().scale(0.01, 0.01, 0.01)
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[0.01, 0.01, 0.01]}>
        <mesh
          material={nodes.Collision.material}
          geometry={nodes.Collision.geometry}
        />
        <mesh material={materials["roof-b"]} geometry={nodes.fix.geometry} />
        <mesh
          material={materials["roof-b"]}
          geometry={nodes["roof-B"].geometry}
          position={[-70, 990.308289, -677.250061]}
        />
        <mesh
          material={materials["roof-a"]}
          geometry={nodes["roof-A"].geometry}
          position={[-35, 990.308289, -827.250061]}
        />
        <mesh
          material={materials["black-curtain"]}
          geometry={nodes["black-curtain"].geometry}
          position={[0, -90, 0]}
        />
        <mesh
          material={materials["walls-far"]}
          geometry={nodes.walls.geometry}
        />
        <mesh
          material={materials.columns}
          geometry={nodes.columns.geometry}
          position={[0.000001, 0, 0]}
        />
        <mesh material={materials.glass} geometry={nodes.glass.geometry} />
        <mesh
          material={materials.horizontal}
          geometry={nodes.horizontal.geometry}
        />
        <mesh
          material={materials["door-rail-walls"]}
          geometry={nodes["door-rail-walls"].geometry}
        />
        <mesh material={materials.floor} geometry={nodes.floor.geometry} />
        <mesh material={materials.ground} geometry={nodes.ground.geometry} />
        <mesh material={materials.frame} geometry={nodes.frame.geometry} />
        <mesh
          material={materials["walls-ground-level"]}
          geometry={nodes["walls-ground-level"].geometry}
          position={[-855, 195, 1122.401123]}
        />
        <mesh
          material={materials["Plato-A"]}
          geometry={nodes["Plato-A"].geometry}
        />
        <mesh
          material={materials["Plato-B"]}
          geometry={nodes["Plato-B"].geometry}
        />
        <mesh
          material={materials["Plato-C"]}
          geometry={nodes["Plato-C"].geometry}
        />
        <mesh
          material={materials["Plato-D"]}
          geometry={nodes["Plato-D"].geometry}
        />
        <mesh
          material={materials["Stairs-A"]}
          geometry={nodes["Stairs-A"].geometry}
        />
        <mesh
          material={materials["Stairs-B"]}
          geometry={nodes["Stairs-B"].geometry}
        />
        <mesh
          material={materials["Stairs-C"]}
          geometry={nodes["Stairs-C"].geometry}
        />
      </group>
    </group>
  );
}
