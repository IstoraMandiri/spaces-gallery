/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useFrame, useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import { ModelProps } from "../types/model";
import { loadModel } from "../services/loader";
import { BufferGeometry, Color, Material } from "three";
import { useConvexCollision, useTrimeshCollision } from "../services/collision";

type GLTFResult = GLTF & {
  nodes: {
    GODMESH: THREE.Mesh;
    GODWHOLE: THREE.Mesh;
    DUDEMESH: THREE.Mesh;
    DUDEWHOLE: THREE.Mesh;
  };
};

type ChadProps = {
  color: string | undefined;
} & ModelProps;

export default function Model(props: ChadProps) {
  const { useEnvStore, color = "#28FA92" } = props;

  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/content/chadknight/ChadKnight9/ChadKnight9.glb",
    loadModel(setLoading)
  );
  const realColor = new Color(color);

  const wireMaterialProps = {
    wireframe: true,
    color: realColor,
    emissive: 0x000000,
    emissiveIntensity: 5,
  };
  const wireframeMaterial = useMemo(
    () => new THREE.MeshLambertMaterial(wireMaterialProps),
    [wireMaterialProps]
  );

  const glowMaterialProps = {
    color: color,
    transparent: true,
    opacity: 0.3,
    side: THREE.DoubleSide,
  };
  const glowMaterial = useMemo(
    () => new THREE.MeshBasicMaterial(glowMaterialProps),
    [glowMaterialProps]
  );

  useTrimeshCollision(
    (nodes.DUDEWHOLE.geometry as BufferGeometry)
      .clone()
      .scale(327, 327, 327)
      .scale(1.3, 1.3, 1.3)
  );

  useTrimeshCollision(
    (nodes.GODWHOLE.geometry as BufferGeometry)
      .clone()
      .scale(327, 327, 327)
      .scale(1.3, 1.3, 1.3)
  );

  // useFrame(({ clock }) => {
  //   if (group.current) {
  //     group.current.rotation.y = -clock.getElapsedTime() / 20;
  //   }
  // });

  // (nodes.DUDEWHOLE.material as Material).transparent = true;
  // (nodes.DUDEWHOLE.material as Material).opacity = 0.999;

  const WIREFRAME_SCALE = 1;

  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[327, 327, 327]}>
        <mesh
          material={nodes.GODWHOLE.material}
          geometry={nodes.GODWHOLE.geometry}
          position={[0.000088, 0, 0]}
        />
        <mesh
          material={nodes.DUDEWHOLE.material}
          geometry={nodes.DUDEWHOLE.geometry}
        />
        {/*<mesh*/}
        {/*    material={nodes.GODEXTERIOR.material}*/}
        {/*    geometry={nodes.DUDEINTERIOR.geometry}*/}
        {/*/>*/}
        {/*<mesh*/}
        {/*    material={nodes.GODEXTERIOR.material}*/}
        {/*    geometry={nodes.GODINTERIOR.geometry}*/}
        {/*/>*/}
        <group scale={[WIREFRAME_SCALE, WIREFRAME_SCALE, WIREFRAME_SCALE]}>
          <mesh
            material={glowMaterial}
            geometry={nodes.GODMESH.geometry}
            position={[0.023525, 0.005701, -0.00254]}
          />
          <mesh
            material={wireframeMaterial}
            geometry={nodes.GODMESH.geometry}
            position={[0.023525, 0.005701, -0.00254]}
          />
          <mesh
            material={wireframeMaterial}
            geometry={nodes.DUDEMESH.geometry}
            position={[-0.01904, -0.014729, -0.002251]}
            rotation={[0, 0, 0]}
            scale={[1.01, 1.01, 1.01]}
          />
          <mesh
            material={glowMaterial}
            geometry={nodes.DUDEMESH.geometry}
            position={[-0.01904, -0.014729, -0.002251]}
            rotation={[0, 0, 0]}
            scale={[1.01, 1.01, 1.01]}
          />
        </group>
      </group>
    </group>
  );
}
