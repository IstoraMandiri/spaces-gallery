/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import React, { useMemo, useRef } from "react";
import { useLoader } from "react-three-fiber";
import { GLTFLoader, GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { draco } from "drei";
import { ModelProps } from "../types/model";
import { loadModel } from "../services/loader";

type GLTFResult = GLTF & {
  nodes: {
    God: THREE.Mesh;
    Face: THREE.Mesh;
  };
};

export default function Model(props: ModelProps) {
  const { useEnvStore } = props;

  const setLoading = useEnvStore((st) => st.setLoading);
  const group = useRef<THREE.Group>();
  const { nodes } = useLoader<GLTFResult>(
    GLTFLoader,
    "https://d27rt3a60hh1lx.cloudfront.net/content/chadknight/ChadKnight1/ChadKnight1.glb",
    loadModel(setLoading)
  );

  const wireMaterialProps = {
    wireframe: true,
    color: 0x00ff00,
  };
  const wireframeMaterial = useMemo(
    () => new THREE.MeshBasicMaterial(wireMaterialProps),
    [wireMaterialProps]
  );

  const glowMaterialProps = {
    color: 0x00ff00,
    transparent: true,
    opacity: 0.3,
  };
  const glowMaterial = useMemo(
    () => new THREE.MeshBasicMaterial(glowMaterialProps),
    [glowMaterialProps]
  );

  return (
    <group ref={group} {...props} dispose={null}>
      <group scale={[350, 350, 350]}>
        <group position={[0.034, -0.0055, -0.001]}>
          <group
            position={[-0.000711, 0.005998, 0.000424]}
            rotation={[0, 0, 0]}
          >
            <mesh material={glowMaterial} geometry={nodes.God.geometry} />
            <mesh material={wireframeMaterial} geometry={nodes.God.geometry} />
          </group>
          <group position={[-0.049417, -0.01283, 0.000676]}>
            <mesh material={glowMaterial} geometry={nodes.Face.geometry} />
            <mesh material={wireframeMaterial} geometry={nodes.Face.geometry} />
          </group>
        </group>
      </group>
    </group>
  );
}
