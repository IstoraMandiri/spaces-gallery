/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

import * as THREE from "three";
import { useMemo, useRef } from "react";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";
import { BufferGeometry } from "three";
import { useConvexPolyhedron } from "@react-three/cannon";
import { useGLTF } from "@react-three/drei";

type GLTFResult = GLTF & {
  nodes: {
    Sphere: THREE.Mesh;
  };
  materials: {
    Sphere: THREE.MeshStandardMaterial;
  };
};

const FILE_URL =
  "https://d27rt3a60hh1lx.cloudfront.net/models/SpacesSphere1/SpacesSphere1.glb";

export default function Model(props: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>();
  const sphereGroup = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(FILE_URL) as GLTFResult;

  // materials.Sphere.metalness = 1;
  // materials.Sphere.refractionRatio = 0.75;
  // materials.Sphere.roughness = 0.27;

  const wallsGeo = useMemo(() => {
    return new THREE.Geometry().fromBufferGeometry(
      nodes.Sphere.geometry as BufferGeometry
    );
  }, [nodes]);
  const [wallsHitbox] = useConvexPolyhedron(() => ({
    type: "Static",
    args: wallsGeo.clone().translate(0, 0.02, 0).scale(100, 100, 100),
  }));

  return (
    <group ref={group} {...props} dispose={null}>
      <group ref={sphereGroup} scale={[100, 100, 100]}>
        <group position={[0, 0, 0]}>
          <mesh
            material={materials.Sphere}
            geometry={nodes.Sphere.geometry}
            castShadow
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload(FILE_URL);
